import re

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.contrib.auth.hashers import make_password
from django.db import transaction

from bot_ref.handlers.check_data import my_router, check_user_chat_id, check_user
from bot_ref.handlers.default import get_user_referral
from bot_ref.handlers.referral import get_user, create_referral
from bot_ref.keyboards import sign_inup_kb
from bot_ref.keyboards.registration_kb import markup
from bot_ref.loader import bot
from bot_ref.models import User
from bot_ref.states import AuthState


class UserData:
    def __init__(self):
        self.user_id = None
        self.binance_id = None
        self.user_name = None
        self.phone_number = None
        self.invite_link = None
        self.user_password = None
        self.repeat_password = None
        self.bot_name = None


# –°–¥–µ–ª–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
users = {}

REGISTRATION_TEXT = """
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π binance_id!

–ò–∑ —á–µ–≥–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å Pay_id?
    - Pay_id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>—Ü–∏—Ñ—Ä</b>!
    - –î–ª–∏–Ω–Ω–∞ Pay_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <b>–±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤(—Ü–∏—Ñ—Ä)</b>
    - Pay_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è</b>

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–Ω –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ!
"""


# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ user_order
@sync_to_async
def get_user_for_registration(user_id):
    if user_id not in users:
        users[user_id] = UserData()
    return users[user_id]


async def command_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(text="–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ üôÖ‚Äç", reply_markup=sign_inup_kb.markup)


@my_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è')
async def process_registration(message: types.Message, state: FSMContext):
    await message.answer(REGISTRATION_TEXT, reply_markup=markup)
    await state.set_state(AuthState.binance_id)


@my_router.message(AuthState.binance_id)
async def process_binance_id(message: types.Message, state: FSMContext):
    binance_id = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    if await check_user_chat_id(chat_id=user_id):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ü´°",
                             reply_markup=sign_inup_kb.markup)
    else:
        if await check_user(binance_id=binance_id):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º binance_id <b>—É–∂–µ –µ—Å—Ç—å</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è",
                reply_markup=markup)
            await state.set_state(AuthState.binance_id)
        else:
            if re.match('^[0-9]+$', binance_id) and len(binance_id) > 3:
                user.binance_id = binance_id
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≤–∞—à–µ –∏–º—è ‚úçÔ∏è", reply_markup=markup)
                await state.set_state(AuthState.username)
            else:
                await message.answer("Pay_id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>—Ü–∏—Ñ—Ä üî¢</b>\n\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è!", reply_markup=markup)
                await state.set_state(AuthState.binance_id)


@my_router.message(AuthState.username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.user_name = username
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?‚úçÔ∏è", reply_markup=markup)
    await state.set_state(AuthState.phone_number)


@my_router.message(AuthState.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.phone_number = phone_number
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å ‚úçÔ∏è", reply_markup=markup)
    await state.set_state(AuthState.user_password)


@my_router.message(AuthState.user_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    if len(password) > 5 and re.match('^[a-zA-Z0-9]+$', password):
        user_id = message.chat.id
        user = await get_user_for_registration(user_id)
        user.user_password = password
        user.user_id = user_id
        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
        user.bot_name = (await bot.get_me()).username
        await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å <b>–µ—â–µ —Ä–∞–∑</b> üîÑ", reply_markup=markup)
        await state.set_state(AuthState.user_password_2)
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤</b> "
                             "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã <b>–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É</b>\n\n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ", reply_markup=markup)
        await state.set_state(AuthState.user_password)


@my_router.message(AuthState.user_password_2)
async def process_password_2(message: types.Message, state: FSMContext):
    password_2 = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.repeat_password = password_2
    if user.user_password == user.repeat_password:

        await save_user(binance_id=user.binance_id,
                        user_password=user.user_password,
                        user_id=user.user_id,
                        user_name=user.user_name,
                        phone_number=user.phone_number,
                        bot_name=user.bot_name)
        referrals = await get_user_referral(user_id)
        if referrals.sender_link_id and referrals.user_id:
            # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ user_id
            user = await get_user(referrals.sender_link_id)
            referral = await get_user(referrals.user_id)
            await create_referral(user.pk, referral)
            await state.clear()
            await bot.send_message(referrals.sender_link_id,
                                   text=f'–£ –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ –∏–º–µ–Ω–∏: {user.user_name}')
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ <b>—É—Å–ø–µ—à–Ω–æ</b> ‚úÖ\n\n"
                             "–¢–µ–ø–µ—Ä—å, –í—ã –¥–æ–ª–∂–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å üíù",
                             reply_markup=sign_inup_kb.markup)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> ‚ùå\n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ", reply_markup=markup)
        await state.set_state(AuthState.user_password)


@sync_to_async
@transaction.atomic
def save_user(binance_id, user_password, user_id, user_name, phone_number, bot_name):
    user = User.objects.create(binance_id=binance_id,
                               user_password=make_password(user_password),
                               is_registered=True,
                               is_active=False,
                               user_id=user_id,
                               invite_link=f"https://t.me/{bot_name}?start={user_id}",
                               user_name=user_name,
                               phone_number=phone_number)
    return user


def authorization_handlers_register(router: Router) -> None:
    router.message.register(command_cancel, F.text == '–û—Ç–º–µ–Ω–∞ ‚ùå', )
    router.message.register(process_registration, F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è', )
    router.message.register(process_binance_id, AuthState.binance_id)
    router.message.register(process_username, AuthState.username)
    router.message.register(process_phone_number, AuthState.phone_number)
    router.message.register(process_password, AuthState.user_password)
    router.message.register(process_password_2, AuthState.user_password_2)
