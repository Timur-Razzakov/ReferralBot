from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.contrib.sites import requests

from bot_ref.keyboards import paid_ikb, sign_inup_kb, admin_kb
from bot_ref.loader import bot, dp
from config import settings as config
from .authorization import my_router
from .check_data import update_user_is_active
from .referral import get_user
from ..models import User

@my_router.message(F.text == '–û–ø–ª–∞—Ç–∏–ª ü§ë')
async def cmd_check_paid(message: types.Message):
    # user_id = message.chat.id
    # if await check_login(user_id):
    help_text = "<b>–ó–∞–º–µ—Ç–∫–∞:</b>\n"
    help_text += ('–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, '
                  '–º—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!')
    await bot.send_message(chat_id=message.chat.id,
                           text=help_text, reply_markup=paid_ikb.check_paid)
    # else:
    #     await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
    #                          reply_markup=sign_inup_kb.markup)


@dp.callback_query(F.data == "send")
async def send_data(callback_query: types.CallbackQuery):
    admin_chat_id = config.ADMINS
    user_id = await get_user(user_id=callback_query.message.chat.id)
    message_text = ''
    message_text += "<pre>"
    message_text += "{:<15} {:<15} {:<15} {:<15}\n".format(
        "Username", "Pay ID", "User_id", "Paid")
    message_text += "{:<15} {:<15} {:<15} {:<15} \n".format(
        user_id.user_name, user_id.binance_id,
        user_id.user_id, '‚úÖ Yes' if user_id.is_active else '‚ùå No')
    message_text += "</pre>"
    await send_data_to_admin(admin_chat_id, message_text)
    await callback_query.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É")


async def send_data_to_admin(admin_chat_id, data_to_send):
    await bot.send_message(admin_chat_id, data_to_send, reply_markup=paid_ikb.pay)


@dp.callback_query(lambda query: query.data in ['reject', 'confirm'])
# –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
async def send_to_client(callback_query: types.CallbackQuery, state: FSMContext):
    global user_id
    text = callback_query.message.text
    # –∫–æ—Å—Ç—ã–ª—å, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id

    lines = text.split('\n')  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    if len(lines) > 1:
        header = lines[0].split()  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        data = lines[1].split()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        if len(data) >= 3:
            user_id = data[2]  # –ü–æ–ª—É—á–∞–µ–º User_id (—Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞)

    if callback_query.data == "reject":
        await bot.send_message(user_id, text="–í–∞—à–∞ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞üôÖ‚Äç", reply_markup=admin_kb.markup)
    elif callback_query.data == "confirm":
        await update_user_is_active(user_id)
        await bot.send_message(user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω!!",
                               reply_markup=admin_kb.markup)

    await state.clear()


def check_paid_handlers_register(router: Router) -> None:
    router.message.register(cmd_check_paid, F.text == '–û–ø–ª–∞—Ç–∏–ª ü§ë')
