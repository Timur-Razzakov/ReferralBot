import re

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from bot_ref.handlers.check_data import my_router, check_login_chat_id, update_user_password
from bot_ref.keyboards import sign_inup_kb
from bot_ref.keyboards.registration_kb import markup
from bot_ref.states import ForgotPasswordState


class UserDataUpdatePassword:
    def __init__(self):
        self.user_id = None
        self.binance_id = None
        self.new_password = None
        self.repeat_password = None


update_data = {}


@sync_to_async
def get_user_for_update(user_id):
    if user_id not in update_data:
        update_data[user_id] = UserDataUpdatePassword()
    return update_data[user_id]


@my_router.message(F.text == '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å? üÜò')
async def forgot_password(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à binance_id ü´°", reply_markup=markup)
    await state.set_state(ForgotPasswordState.user_binance_id)


@my_router.message(ForgotPasswordState.user_binance_id)
async def process_forgot_password_login(message: types.Message, state: FSMContext):
    binance_id = message.text
    user_id = message.chat.id
    if await check_login_chat_id(user_binance_id=binance_id, chat_id=user_id):
        # –ø–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—Ä—è–µ–º –ø–æ user_id
        user_data = await get_user_for_update(user_id)
        user_data.binance_id = binance_id
        await message.answer("binance_id <b>—É—Å–ø–µ—à–Ω–æ</b> –Ω–∞–π–¥–µ–Ω, "
                             "–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª–æ–≥–∏–Ω–æ–º üåü\n\n "
                             "–¢–µ–ø–µ—Ä—å –≤—ã <b>—Å–º–æ–∂–µ—Ç–µ</b> –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å ‚úÖ\n\n"
                             "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</b> ‚úçÔ∏è", reply_markup=markup)

        await state.set_state(ForgotPasswordState.new_password)
    else:
        await message.answer("–í—ã <b>–Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b> ‚ùå\n\n"
                             "–ù–∞ —ç—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–≤–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                             "1. –¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç\n"
                             "2. –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å binance_id –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏\n\n"
                             "–í—ã –º–æ–∂–µ—Ç–µ <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç—å</b> –ø–æ–ø—ã—Ç–∫—É üîÑ",
                             reply_markup=sign_inup_kb.markup)
        await state.clear()


@my_router.message(ForgotPasswordState.new_password)
async def process_forgot_password_password(message: types.Message, state: FSMContext):
    password = message.text
    if len(password) > 5 and re.match('^[a-zA-Z0-9]+$', message.text):
        user_id = message.chat.id
        user_data = await get_user_for_update(user_id)
        user_data.new_password = password
        await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å <b>–µ—â–µ —Ä–∞–∑</b> üîÑ", reply_markup=markup)
        await state.set_state(ForgotPasswordState.new_password_2)
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤</b> "
                             "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã <b>–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É</b>\n\n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ", reply_markup=markup)
        await state.set_state(ForgotPasswordState.new_password)


@my_router.message(ForgotPasswordState.new_password_2)
async def process_forgot_password_password_2(message: types.Message, state: FSMContext):
    repeat_password = message.text
    user_id = message.chat.id
    user_data = await get_user_for_update(user_id)
    user_data.repeat_password = repeat_password
    if user_data.new_password == user_data.repeat_passwor:
        await update_user_password(binance_id=user_data.binance_id,
                                   password=user_data.new_password)
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–∞ <b>—É—Å–ø–µ—à–Ω–æ</b> ‚úÖ\n\n"
                             "–¢–µ–ø–µ—Ä—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üíù",
                             reply_markup=sign_inup_kb.markup)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> ‚ùå\n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ", reply_markup=markup)
        await state.set_state(ForgotPasswordState.new_password)


def update_password_handlers_register(router: Router) -> None:
    router.message.register(forgot_password, F.text == '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å? üÜò', )
    router.message.register(process_forgot_password_login, ForgotPasswordState.user_binance_id)
    router.message.register(process_forgot_password_password, ForgotPasswordState.new_password)
    router.message.register(process_forgot_password_password_2, ForgotPasswordState.new_password_2)
