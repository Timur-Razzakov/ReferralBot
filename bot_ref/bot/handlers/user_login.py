from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.contrib.auth.hashers import check_password

from bot_ref.bot.dataclasses import admins_id
from bot_ref.bot.keyboards import default_kb, admin_kb
from bot_ref.bot.keyboards import registration_kb
from bot_ref.bot.states import SignInState
from bot_ref.bot.utils import get_user_for_login, get_user, paid_check
from bot_ref.models import User

sign_in_router = Router(name=__name__)

SIGN_IN_TEXT = """
–í—Ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚≠êÔ∏è

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 100$
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏–ª ü§ë
"""


@sign_in_router.message(F.text == '–í–æ–π—Ç–∏ üëã')
async def command_sign_in(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Pay_Id ‚ú®",
        reply_markup=registration_kb.markup
    )
    await state.set_state(SignInState.login)


@sign_in_router.message(F.text == '–ü–æ–º–æ—â—å üÜò')
async def user_help(message: types.Message):
    help_text = """
    –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º? –í–æ—Ç —à–∞–≥–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:

–ù–∞–∂–º–∏—Ç–µ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Binance Pay ID, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –í–æ–π—Ç–∏üëã –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É!
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º @Podderlka. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!
    """
    await message.answer(help_text)


@sign_in_router.message(SignInState.login)
async def process_sign_in(message: types.Message, state: FSMContext):
    pay_id = message.text
    user_id = message.chat.id
    user = await get_user(pay_id=pay_id)

    if user and user.user_id == user_id:
        user = await get_user_for_login(user_id)
        user.pay_id = pay_id
        user.user_id = user_id
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å üîê",
            reply_markup=registration_kb.markup_cancel_forgot_password
        )
        await state.set_state(SignInState.password)
    else:
        await message.answer(
            "–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ <b>–Ω–µ—Ç</b>, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùå",
            reply_markup=registration_kb.markup
        )
        await state.set_state(SignInState.login)


@sign_in_router.message(SignInState.password)
async def process_pass(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    password = message.text
    user = await get_user_for_login(user_id)
    user.password = password
    user.current_state = True

    if await get_password(pay_id=user.pay_id, password=user.password):
        markup = default_kb.paid_kb

        if user_id in admins_id:
            markup = admin_kb.admin_markup
        elif await paid_check(user_id):
            markup = default_kb.markup

        await message.answer(
            SIGN_IN_TEXT,
            reply_markup=markup
        )

        await state.clear()
    else:
        await message.answer(
            "–ü–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π</b> –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ",
            reply_markup=registration_kb.markup_cancel_forgot_password
        )
        await state.set_state(SignInState.password)


@sync_to_async
def get_password(pay_id, password) -> bool:
    user = User.objects.get(pay_id=pay_id)
    return check_password(password, user.user_password)
