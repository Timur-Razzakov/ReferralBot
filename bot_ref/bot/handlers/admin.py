import random

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from openpyxl.workbook import Workbook
from tabulate import tabulate

from bot_ref.bot.loader import bot
from bot_ref.models import User
from ..dataclasses import admins_id
from ..keyboards import admin_kb, sign_inup_kb
from ..middlewares.is_admin import IsAdminMiddleware
from ..states.roulette_state import RouletteState
from ..utils import check_login, get_users_referrals

HELP_ADMIN_TEXT = '''
–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üôã\n\n
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫:
--------------------
'''
# –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

admin_router = Router(name=__name__)
admin_router.message.middleware(IsAdminMiddleware())


@admin_router.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞:')
async def send_all(message: types.Message):
    user_id = message.chat.id
    if await check_login(user_id):
        if user_id in admins_id:
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ: <b>{message.text[message.text.find(' '):]}</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            async for user in User.objects.filter(is_registered=True):
                await bot.send_message(chat_id=user.user_id, text=message.text[message.text.find(' '):])
            await message.answer("–í—Å–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                             reply_markup=sign_inup_kb.markup)


@admin_router.message(F.text == '–ê–¥–º–∏–Ω üëë')
async def cmd_admin(message: types.Message):
    user_id = message.chat.id
    if await check_login(user_id):
        if user_id in admins_id:
            await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ü§¥\n\n"
                                 "–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üí≠",
                                 reply_markup=admin_kb.markup)
        else:
            await message.answer(
                "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                             reply_markup=sign_inup_kb.markup)


@admin_router.message(F.text == '–î–æ–º–æ–π üè†')
async def cmd_home(message: types.Message):
    user_id = message.chat.id
    if await check_login(user_id):
        if user_id in admins_id:
            await message.answer(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=admin_kb.admin_markup
            )
        else:
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                             reply_markup=sign_inup_kb.markup)


@admin_router.message(F.text == '–ü–æ–º–æ—â—å üîî')
async def cmd_help_admin(message: types.Message):
    user_id = message.chat.id
    if await check_login(user_id):
        if user_id in admins_id:
            await message.answer(text=HELP_ADMIN_TEXT, reply_markup=admin_kb.markup)
        else:
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è",
                             reply_markup=sign_inup_kb.markup)


@admin_router.message(F.text == '–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà')
async def short_statistics(message: types.Message):
    all_users: list[User] = await get_users_referrals(0)

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [user.pk, user.user_name, user.binance_id]
        for user in all_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = ["id", "name", "binance_id"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt="pretty")

    html = f'<pre>{table}</pre>'

    await message.answer(html, parse_mode='HTML')


@admin_router.message(F.text == '–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def full_statistics(message: types.Message):
    all_users: list[User] = await get_users_referrals(0)

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [
            user.pk,
            user.user_name,
            user.binance_id,
            user.referrer_id,
            user.phone_number,
            '‚úÖ Yes' if user.is_active else '‚ùå No'
        ]
        for user in all_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = [
        'id',
        'name',
        'binance id',
        'referrer id',
        'phone number',
        'paid status'
    ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt="pretty")
    html = f'<pre>{table}</pre>'

    await message.answer(html, parse_mode='HTML')


@admin_router.message(F.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ excel ‚¨áÔ∏è')
async def download_as_execl(message: types.Message):
    users = await get_users_referrals(0)

    wb = Workbook()
    sh1 = wb.active
    sh1.title = 'Report'

    sh1.append(
        (
            'id',
            'name',
            'binance id',
            'referrer id',
            'phone number',
            'paid status'
        )
    )

    for user in users:
        sh1.append(
            (
                user.pk,
                user.user_name,
                user.binance_id,
                user.referrer_id,
                user.phone_number,
                '‚úÖ Yes' if user.is_active else '‚ùå No'
            )
        )

    wb.save('./bot_ref/bot/reports/report.xlsx')

    file = FSInputFile('./bot_ref/bot/reports/report.xlsx')
    await message.answer_document(file)


@admin_router.message(F.text == '–†—É–ª–µ—Ç–∫–∞ üé≤')
async def roulette(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    await state.set_state(RouletteState.limit)


@admin_router.message(RouletteState.limit)
async def start_roulette(message: types.Message, state: FSMContext):
    limit = int(message.text)
    all_users: list[User] = await get_users_referrals(0)

    part_users = random.sample(all_users, min(limit, len(all_users)))

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [user.pk, user.user_name, user.binance_id]
        for user in part_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = ["id", "name", "binance_id"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt="pretty")
    html = f'<pre>{table}</pre>'
    await state.clear()

    await message.answer(html, parse_mode='HTML')
