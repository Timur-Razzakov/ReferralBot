import random

from aiogram import types, Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from openpyxl.workbook import Workbook
from tabulate import tabulate

from bot_ref.bot.loader import bot
from bot_ref.models import User
from ..keyboards import admin_kb
from ..middlewares.is_admin import IsAdminMiddleware
from ..states.mailing_state import MailingState
from ..states.roulette_state import RouletteState
from ..utils import get_users_referrals, get_paid_users

HELP_ADMIN_TEXT = '''
–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üôã –£ –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫:

–î–æ–º–æ–π üè† - –≤–µ—Ä–Ω–µ—Ç –í–∞—Å –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü–æ–º–æ—â—å üîî - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞
–†—É–ª–µ—Ç–∫–∞ üé≤ - –≤—ã–±–æ—Ä N —Å–ª—É—á–∞–π–Ω—ã—Ö, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –†—É–ª–µ—Ç–∫–∏, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3), –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∏—Å–ª–∞ —Å—Ä–∞–∑—É –±—É–¥—É—Ç –ø—Ä–∏—Å–ª–∞–Ω—ã ID, –ò–º—è –∏ PayID —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!
–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà - –≤—ã–≤–æ–¥–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID, –ò–º—è, PayID)
–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä - –≤—ã–≤–æ–¥ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (ID, –ò–º—è, PayID, ID —Ä–µ—Ñ–æ–≤–æ–¥–∞, –Ω–æ–º–µ—Ä, —Å—Ç–∞—Ç—É—Å)
–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ excel ‚¨áÔ∏è - –ø–æ–ª—É—á–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
'''

admin_router = Router(name=__name__)
admin_router.message.middleware(IsAdminMiddleware())


async def send_mailing(message: types.Message):
    users = await get_paid_users()
    text = message.text[message.text.find(':') + 1:]
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è')

    for user in users:
        try:
            await bot.send_message(chat_id=user.user_id, text=text)
        except TelegramBadRequest:
            print('error', user.user_id, user.user_name)

    await message.answer('–í—Å–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


@admin_router.message(F.text.regexp('–†–∞—Å—Å—ã–ª–∫–∞:'))
async def send_all(message: types.Message):
    await send_mailing(message)


@admin_router.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞ üìß')
async def send_mailing_start(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üìß')
    await state.set_state(MailingState.status)


@admin_router.message(MailingState.status)
async def mailing_send(message: types.Message, state: FSMContext):
    await send_mailing(message)
    await state.clear()


@admin_router.message(F.text == '–ê–¥–º–∏–Ω üëë')
async def cmd_admin(message: types.Message):
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ü§¥\n\n'
                         '–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üí≠',
                         reply_markup=admin_kb.markup)


@admin_router.message(F.text == '–î–æ–º–æ–π üè†')
async def cmd_home(message: types.Message):
    await message.answer(
        '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
        reply_markup=admin_kb.admin_markup
    )


@admin_router.message(F.text == '–ü–æ–º–æ—â—å üîî')
async def cmd_help_admin(message: types.Message):
    await message.answer(text=HELP_ADMIN_TEXT)


@admin_router.message(F.text == '–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà')
async def short_statistics(message: types.Message):
    all_users: list[User] = await get_users_referrals(0)

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [user.pk, user.user_name, user.pay_id]
        for user in all_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = ['id', 'name', 'pay_id']

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt='pretty')

    html = f'<pre>{table}</pre>'

    await message.answer(html, parse_mode='HTML')


@admin_router.message(F.text == '–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def full_statistics(message: types.Message):
    all_users: list[User] = await get_users_referrals(0)

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [
            user.pk,
            user.user_name,
            user.pay_id,
            user.referrer_id,
            user.phone_number,
            '‚úÖ Yes' if user.is_active else '‚ùå No'
        ]
        for user in all_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = [
        'id',
        'name',
        'pay id',
        'referrer id',
        'phone number',
        'paid status'
    ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt='pretty')
    html = (f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å {len(all_users)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:'
            f'<pre>{table}</pre>')

    await message.answer(html, parse_mode='HTML')


@admin_router.message(F.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ excel ‚¨áÔ∏è')
async def download_as_execl(message: types.Message):
    users = await get_users_referrals(0)

    wb = Workbook()
    sh1 = wb.active
    sh1.title = 'Report'

    sh1.append(
        (
            'id',
            'name',
            'pay id',
            'referrer id',
            'phone number',
            'paid status'
        )
    )

    for user in users:
        sh1.append(
            (
                user.pk,
                user.user_name,
                user.pay_id,
                user.referrer_pay_id,
                user.phone_number,
                '‚úÖ Yes' if user.is_active else '‚ùå No'
            )
        )

    wb.save('./bot_ref/bot/reports/report.xlsx')

    file = FSInputFile('./bot_ref/bot/reports/report.xlsx')
    await message.answer_document(file)


@admin_router.message(F.text == '–†—É–ª–µ—Ç–∫–∞ üé≤')
async def roulette(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    await state.set_state(RouletteState.limit)


@admin_router.message(RouletteState.limit)
async def start_roulette(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–†—É–ª–µ—Ç–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ ‚ÄºÔ∏è')
        return

    limit = int(message.text)
    all_users: list[User] = await get_paid_users()

    part_users = random.sample(all_users, min(limit, len(all_users)))

    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_with_referrals = [
        [user.pk, user.user_name, user.pay_id]
        for user in part_users
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = ['id', 'name', 'pay_id']

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    table = tabulate(data_with_referrals, headers, tablefmt='pretty')
    html = f'<pre>{table}</pre>'
    await state.clear()

    await message.answer(html, parse_mode='HTML')
