import re

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from bot_ref.bot.handlers.check_data import check_user_chat_id, check_user
from bot_ref.bot.keyboards import registration_kb
from bot_ref.bot.keyboards import sign_inup_kb
from bot_ref.bot.loader import bot
from bot_ref.bot.states import AuthState
from bot_ref.bot.utils import get_user_for_registration, save_user, get_user, create_referral, get_user_referral
from config import settings

sign_up_router = Router(name=__name__)

REGISTRATION_TEXT = """
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π Binance Pay_Id!
‚ùî–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Pay_Id –∏ –≥–¥–µ –µ–≥–æ –∏—Å–∫–∞—Ç—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ Binance: 
https://www.binance.com/ru/support/faq/%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-binance-pay-id-f3040335259a4b1ea68934daf94bab1d

‚ÄºÔ∏è–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç—Ä–∞–≤–∏—Ç—å –í–∞—à Pay_Id —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
"""


@sign_up_router.message(F.text == '–û—Ç–º–µ–Ω–∞ ‚ùå')
async def command_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()

    await message.answer(
        text="–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ üôÖ‚Äç",
        reply_markup=sign_inup_kb.markup
    )


@sign_up_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úåÔ∏è')
async def process_registration(message: types.Message, state: FSMContext):
    await message.answer(REGISTRATION_TEXT, reply_markup=registration_kb.markup)
    await state.set_state(AuthState.pay_id)


@sign_up_router.message(AuthState.pay_id)
async def process_binance_id(message: types.Message, state: FSMContext):
    pay_id = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    if await check_user_chat_id(chat_id=user_id):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ü´°",
                             reply_markup=sign_inup_kb.markup)
        await state.clear()
    else:
        if await check_user(pay_id=pay_id):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º pay_id <b>—É–∂–µ –µ—Å—Ç—å</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è",
                reply_markup=registration_kb.markup)
            await state.set_state(AuthState.pay_id)
        else:
            if re.match('^[0-9]+$', pay_id) and len(pay_id) > 3:
                user.pay_id = pay_id
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≤–∞—à–µ –∏–º—è ‚úçÔ∏è", reply_markup=registration_kb.markup)
                await state.set_state(AuthState.username)
            else:
                await message.answer("Pay_id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>—Ü–∏—Ñ—Ä üî¢</b>\n\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚Ü©Ô∏è!", reply_markup=registration_kb.markup)
                await state.set_state(AuthState.pay_id)


@sign_up_router.message(AuthState.username)
async def process_username(message: types.Message, state: FSMContext):
    phone_number_text = """
    –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚úçÔ∏è

–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å‚ùóÔ∏è

–ú—ã –Ω–µ –ø–∏—à–µ–º, –Ω–µ –∑–≤–æ–Ω–∏–º –∏ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!üîê

–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞‚ÄºÔ∏è

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –í —Å–ª—É—á–∞–µ —É—Ç–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!
–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω—ã–º!üìù

–ü—Ä–∏–º–µ—Ä: +71234567890  ‚úÖ
    """
    username = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.user_name = username
    await message.answer(phone_number_text, reply_markup=registration_kb.markup)
    await state.set_state(AuthState.phone_number)


@sign_up_router.message(AuthState.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.phone_number = phone_number
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å ‚úçÔ∏è",
        reply_markup=registration_kb.markup
    )
    await state.set_state(AuthState.user_password)


@sign_up_router.message(AuthState.user_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    if len(password) > 5 and re.match('^[a-zA-Z0-9]+$', password):
        user_id = message.chat.id
        user = await get_user_for_registration(user_id)
        user.user_password = password
        user.user_id = user_id
        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
        user.bot_name = (await bot.get_me()).username
        await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å <b>–µ—â–µ —Ä–∞–∑</b> üîÑ", reply_markup=registration_kb.markup)
        await state.set_state(AuthState.user_password_2)
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ <b>–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤</b> "
                             "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã <b>–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É</b>\n\n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ", reply_markup=registration_kb.markup)
        await state.set_state(AuthState.user_password)


@sign_up_router.message(AuthState.user_password_2)
async def process_password_2(message: types.Message, state: FSMContext):
    password_2 = message.text
    user_id = message.chat.id
    user = await get_user_for_registration(user_id)
    user.repeat_password = password_2
    if user.user_password == user.repeat_password:

        referrals = await get_user_referral(user_id)
        if referrals.sender_link_id and referrals.user_id:
            referrer = await get_user(user_id=referrals.sender_link_id)

            await save_user(
                pay_id=user.pay_id,
                user_password=user.user_password,
                user_id=user.user_id,
                user_name=user.user_name,
                phone_number=user.phone_number,
                bot_name=user.bot_name,
                referrer_id=referrer.pk
            )

            referral = await get_user(user_id=referrals.user_id)
            await create_referral(referrer.pk, referral)
            await state.clear()
            await bot.send_message(
                referrals.sender_link_id,
                text=f'–£ –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ –∏–º–µ–Ω–∏: {referral.user_name}'
            )
            await bot.send_message(
                chat_id=settings.NOTIFICATION_GROUP_ID,
                text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referral.user_name}, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ'
                     f'—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer.user_name}'
            )
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n\n"
            "–¢–µ–ø–µ—Ä—å –í–∞–º –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç"
            " —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –í–æ–π—Ç–∏ üëã",
            reply_markup=sign_inup_kb.markup
        )
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å <b>–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> ‚ùå\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ",
            reply_markup=registration_kb.markup
        )
        await state.set_state(AuthState.user_password)
